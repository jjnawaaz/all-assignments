/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');

const app = express();

app.use(bodyParser.json());


const todos = []

app.get('/',(req,res)=>{
  res.send("Hello there")
})



app.get('/todos',(req,res)=>{
  res.status(200).send(todos)
})

app.get('/todos/:id',(req,res)=>{
  let title = req.params.id
  for(let i = 0; i < todos.length; i++)
{
  if(todos[i].title === title){
    return res.status(200).json({
      message: "Successfully fetched todo",
      todo: todos[i]
    })
  } else {
    return res.status(403).json({
      message: "Error while fetching todo",
  })
  } 
}})




app.post('/todos',(req,res)=>{
  const todo = req.body
  const {title, completed,description} = todo
  if(!title || !description || !completed) return res.status(403).send("Please send the todos in the following format title: completed: description: ")
  
  
  todos.push(todo)
  res.status(200).json({
  message: "Succesfully added todo",
  todos: todos
})
})


app.put('/todos/:id',(req,res)=>{
  const todoname = req.params.id
  let ans = (todoname === 'Hit gym') ? true : false;
  const todo = req.body
  const {title, completed,description} = todo
  if(!title || !description || !completed) return res.status(403).send("Please send the todos in the following format title: completed: description: ")
  for(let i = 0; i < todos.length; i++){
      if(todos[i].title == todoname){
        todos[i] = todo
        return res.status(200).send(todos[i])
      } else {
        return res.status(403).json({
          message: "Invalid Todo",
      })
      }
  }
  return res.send('Iam hitting the end for some reason')
})




app.delete('/todos/:id',(req,res)=>{
  const id = req.params.id
  if(todos[id] != -1){
    todos.splice(id,1)
    return res.status(200).json({
      message: "Successfully deleted the todo"
    })
  } else {
    return res.status(403).json({
      message: "Invalid Todo",
  })
  }
})


app.listen(3000,(req,res)=>{
  console.log("Server started In port 3000")
})

module.exports = app;
